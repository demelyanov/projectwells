@model DashboardViewModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="row">
    <div class="col-md-12">
        <h2>Project: @Model.Project.Name</h2>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <h3>
            <i class=" glyphicon glyphicon-menu-right info-menu" id="wells-menu" role="button" data-toggle="collapse" href="#collapseWells"
               aria-expanded="false" aria-controls="collapseWells"></i> Wells: @Model.Project.Wells.Count
        </h3>
    </div>
    <div class="collapse" id="collapseWells">
        <div class="well">
            <ul class="list-group">
                @foreach (var item in Model.Project.Wells.OrderBy(w => w.Name))
                {
                    <li class="list-group-item info-menu" role="button" data-toggle="collapse" href="#collapseStages@(item.Id)"
                        aria-expanded="false" aria-controls="collapseStages@(item.Id)">
                        <i class=" glyphicon glyphicon-menu-right well-item"></i> @item.Name <span class="badge">Stages: @item.Stages.Count</span>

                        @{

                            var wellFiles = (decimal)item.Stages.Sum(s => s.FilesCount);
                            var pickingFiles = (decimal)item.Stages.Sum(s => s.PickingPersons.Count);

                        }

                        <span class="badge badge-percentage">@((pickingFiles * 100) / wellFiles)% complete</span>

                        <div class="collapse" id="collapseStages@(item.Id)">
                            <ul class="list-group">
                                @foreach (var stage in item.Stages.OrderBy(s => s.Name))
                                {
                                    <li class="list-group-item list-group-item-info files-menu" stage-id="@stage.Id"
                                        data-toggle="collapse" href="#collapseFiles@(stage.Id)" aria-expanded="false" aria-controls="collapseFiles@(stage.Id)">
                                        <i class=" glyphicon glyphicon-menu-right stage-item"></i>
                                        @stage.Name <span class="badge">Files: @stage.FilesCount</span>

                                        <div class="collapse" id="collapseFiles@(stage.Id)">
                                            <div class="row files-info">
                                                <div class="col-md-12">
                                                    <div class="col-md-3">Folder</div>
                                                    <div class="col-md-3">Event</div>
                                                    <div class="col-md-3">Date</div>
                                                    @if (User.IsInRole("Administrator"))
                                                    {
                                                        <div class="col-md-3">Picker</div>
                                                    }
                                                </div>
                                                @if (0 != stage.PickingPersons.Where(p => p.CutEvent != null).Count())
                                                {
                                                    <div class="col-md-12 alert-success text-center">Cut Event</div>
                                                    @foreach (var cutItem in stage.PickingPersons.Where(p => p.CutEvent != null).OrderByDescending(p => p.EventDate))
                                                    {
                                                        <div class="col-md-12">
                                                            <div class="col-md-3">@cutItem.Folder</div>
                                                            <div class="col-md-3">@cutItem.CutEvent</div>
                                                            <div class="col-md-3">@cutItem.EventDate</div>
                                                            <!-- div class="col-3"></div -->
                                                        </div>
                                                    }
                                                }
                                                @if (0 != stage.PickingPersons.Where(p => p.PickedEvent != null).Count())
                                                {
                                                    <div class="col-md-12 alert-warning text-center">Picked Event</div>
                                                    @foreach (var pickedItem in stage.PickingPersons.Where(p => p.PickedEvent != null).OrderByDescending(p => p.EventDate))
                                                    {
                                                        <div class="col-md-12">
                                                            <div class="col-md-3">@pickedItem.Folder</div>
                                                            <div class="col-md-3">@pickedItem.PickedEvent</div>
                                                            <div class="col-md-3">@pickedItem.EventDate</div>
                                                            <!-- div class="col-3"></div -->
                                                        </div>
                                                    }
                                                }

                                                @if (0 != stage.PickingPersons.Where(p => p.DeletedEvent != null).Count())
                                                {
                                                    <div class="col-md-12 alert-danger text-center">Deleted Event</div>
                                                    @foreach (var deletedItem in stage.PickingPersons.Where(p => p.DeletedEvent != null).OrderByDescending(p => p.EventDate))
                                                    {
                                                        <div class="col-md-12">
                                                            <div class="col-md-3">@deletedItem.Folder</div>
                                                            <div class="col-md-3">@deletedItem.DeletedEvent</div>
                                                            <div class="col-md-3">@deletedItem.EventDate</div>
                                                            <!-- div class="col-3"></div -->
                                                        </div>
                                                    }
                                                }

                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="btn-group" role="group" aria-label="...">
            <button type="button" chart-panel="#p1panel" class="btn btn-default active">Pies</button>
            <button type="button" chart-panel="#p3panel" class="btn btn-default">Picking Stats</button>
            <button type="button" chart-panel="#p2panel" class="btn btn-default">Picker Info</button>
        </div>
    </div>
</div>
<br />
<!-- p1 charts -->
<div class="panel panel-default" id="p1panel">
    <div class="panel-heading">Wells</div>
    <div class="panel-body">
        <div class="row">
            <div class="col-md-12">
                @foreach (var well in Model.WellPies)
                {
                    <div class="col-md-4 text-center">
                        <div id="wellPieChart@(well.Id)" style="height:300px; width: 300px;margin: 0 auto;" class="well-pie"></div>
                        <div class="text-center">@well.Name</div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- p2. picker stat -->
<div class="panel panel-default" id="p2panel" style="display: none;">
    <div class="panel-heading">Picker Info</div>
    <div class="panel-body">
        <div class="row">
            <div class="col-md-12">
                <form onsubmit="return false;">
                    <input id="pickerName" class="form-control" placeholder="picker name" />
                </form>
            </div>
            <div class="col-md-12" id="chartPlaceholder" style="display: none;">
                <div id="pickerChart" style="height:300px"></div>
            </div>
        </div>
    </div>
</div>


<!-- p3 tableview -->

<div class="panel panel-default" id="p3panel" style="display: none;">
    <div class="panel-heading">Picking Stats</div>
    <div class="panel-body">
        <div class="row">
            <div class="col-md-12 p-3-form-bottom">
                <div class="form-group">
                    <label class="control-label col-md-1" style="line-height: 32px;" for="wallStat">Well</label>
                    <div class="col-md-5">
                        <select class="form-control" name="states[]" id="wallStat" multiple="multiple" style="width: 300px;">
                            @foreach (var well in Model.Project.Wells.OrderBy(w => w.Name))
                            {
                                <option value="@well.Id">@well.Name</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="col-md-12" id="pickerTableView" style="display: none;">
                <div class="row table-view-header">
                    <div class="col-md-1">Well</div>
                    <div class="col-md-1">Stage</div>
                    <div class="col-md-2">Folder</div>
                    <div class="col-md-2">Cut Event</div>
                    <div class="col-md-2">Picked Event</div>
                    <div class="col-md-2">Deleted Event</div>
                    <div class="col-md-1">Date</div>
                    @if (User.IsInRole("Administrator"))
                    {
                        <div class="col-md-1">Picker</div>
                    }
                </div>
                <div id="pickingView"></div>
            </div>
        </div>
    </div>
</div>


@section scripts{
    <script src="~/js/jquery.flot.min.js"></script>
    <script src="~/js/jquery.flot.pie.min.js"></script>
    <script src="~/js/jquery.flot.time.min.js"></script>
    <script>

        $(document).ready(function () {

            $('#wells-menu').click(function () {

                if ($(this).hasClass('glyphicon-menu-right')) {
                    $(this).removeClass('glyphicon-menu-right');
                    $(this).addClass('glyphicon-menu-down');
                } else {

                    $(this).removeClass('glyphicon-menu-down');
                    $(this).addClass('glyphicon-menu-right');
                }

            });


            $('.info-menu').click(function () {
                var menuSign = $(this).find('i.well-item');
                if (menuSign.hasClass('glyphicon-menu-right')) {
                    menuSign.removeClass('glyphicon-menu-right');
                    menuSign.addClass('glyphicon-menu-down');
                } else {

                    menuSign.removeClass('glyphicon-menu-down');
                    menuSign.addClass('glyphicon-menu-right');
                }

            });

            $('.files-menu').click(function (e) {

                var stage_id = $(this).attr('stage-id');

                var tableElm = $('#collapseFiles' + stage_id);
                if (tableElm.hasClass('in')) {
                    tableElm.removeClass('in');
                } else {
                    tableElm.addClass('in');
                }

                var stageSign = $(this).find('i.stage-item');
                if (stageSign.hasClass('glyphicon-menu-right')) {
                    stageSign.removeClass('glyphicon-menu-right');
                    stageSign.addClass('glyphicon-menu-down');
                } else {

                    stageSign.removeClass('glyphicon-menu-down');
                    stageSign.addClass('glyphicon-menu-right');
                }

                return false;
            });


            /* p1 charts */
            var pies = [@(string.Join(',', Model.WellPies.Select(w=>w.Id.ToString()).ToArray<string>()))];
            var dataArr = [@Html.Raw(string.Join(',', Model.WellPies.Select(w => w.Data).ToArray()))];

            $.each(pies, function (indx, el) {
                $.plot('#wellPieChart' + el, dataArr[indx], {
                    series: {
                        pie: {
                            show: true,
                            radius: 1,
                            label: {
                                show: true,
                                radius: 3 / 5,
                                formatter: function (label, series) {
                                    var percent = Math.round(series.percent);
                                    return label;
                                }
                            }

                        }
                    },
                    legend: {
                        show: false
                    }
                });
            });

            /* p2. chart */
            $("#pickerName").focus(function () {
                $(this).addClass("hasfocus");
            });

            $("#pickerName").blur(function () {
                $(this).removeClass("hasfocus");
            });

            $('#pickerName').keyup(function (ev) {
                // 13 is ENTER
                if (ev.which == 13 && $("#pickerName").hasClass("hasfocus")) {
                    if (0 < $("#pickerName").val().length) {
                        console.log('loading data');
                        loadPickerData($("#pickerName").val());
                    }
                };
            });

            /* p3 chart */
            $('#wallStat').select2({
                placeholder: 'Select a well'
            });

            $('#wallStat').on('change.select2', function () {
                var dataSrc = $(this).select2('data');

                if (0 == dataSrc.length) {
                    // hide table
                    $('#pickerTableView').hide();
                    return;
                }

                var idArr = [];
                $.each(dataSrc, function (indx, el) {
                    idArr.push(el.id);
                });
                $.ajax({
                    url: '/home/_loadWellData',
                    method: 'post',
                    data: { ids: idArr },
                    success: function (result) {
                        fillPickingView(result);
                    },
                    error: function () {
                        console.log('error');
                    }
                });

            });


            /* buttons */
            $('.btn-group > button').click(function () {
                $('.btn-group > button').removeClass('active');
                $('.panel.panel-default').hide();
                var panelId = $(this).attr('chart-panel');
                $(panelId).show();
            });
        });




        function loadPickerData(picker) {
            $.ajax({
                url: '/home/_loadPickerData',
                method: 'post',
                data: { picker: picker, project: @Model.Project.Id },
                success: function (result) {
                    if (0 == result.length) {
                        console.log('not found');
                        $('#chartPlaceholder').hide();
                    } else {
                        var pickerData = [];
                        $('#chartPlaceholder').show();

                        if (1 == result.length) {
                            var point0 = [];
                            var monthDate = new Date(result[0].date);

                            point0.push(gd(monthDate.getFullYear(), monthDate.getMonth(), 1));
                            point0.push(0);
                            pickerData.push(point0);
                        }

                        $.each(result, function (indx, el) {
                            var point = [];
                            var bDate = new Date(el.date);
                            console.log(bDate);
                            point.push(gd(bDate.getFullYear(), bDate.getMonth(), bDate.getDate()));
                            point.push(el.count);
                            pickerData.push(point);

                        });
                        var maxXTick = new Date(result[result.length - 1].date);
                        console.log(pickerData);
                        showChart(pickerData); //, gd(maxXTick.getFullYear(), maxXTick.getMonth(), maxXTick.getDay()));
                    }
                },
                error: function () {
                    console.log('error');
                }
            });
        }

        function showChart(pickerData) {
            var plot = $.plot($("#pickerChart"),
                [{ data: pickerData, label: "Picked Files" }], {
                    series: {
                        lines: {
                            show: true,
                            lineWidth: 2,
                            fill: true, fillColor: { colors: [{ opacity: 0.5 }, { opacity: 0.2 }] }
                        },
                        points: {
                            show: true,
                            lineWidth: 1
                        },
                        shadowSize: 0
                    },
                    grid: {
                        hoverable: true,
                        clickable: true,
                        tickColor: "#f9f9f9",
                        borderWidth: 0
                    },
                    colors: ["#3B5998"],
                    xaxis: {
                        mode: "time",
                        tickSize: [1, "day"],
                        tickLength: 1,
                        axisLabel: "dfsdfsd",
                        axisLabelUseCanvas: true,
                        axisLabelFontSizePixels: 12,
                        axisLabelFontFamily: 'Verdana, Arial',
                        axisLabelPadding: 10

                        //max: maxXTick
                    },

                    yaxis: { ticks: 3, tickDecimals: 0 },
                });
        }

        function gd(year, month, day) {
            console.log('day in gd');
            console.log(day);

            return new Date(year, month, day).getTime();
        }

        function fillPickingView(source) {
            var root = $('#pickingView');
            root.empty();
            if (0 == source.length) {
                $('#pickerTableView').hide();
            }
            $('#pickerTableView').show();
            $.each(source, function (indx, el) {

                var row = '<div class="row table-view-row ';
                if (0 == indx % 2) {
                    row += 'gray-row">';
                } else {
                    row += '">';
                }
                row += '<div class="col-md-1">' + el.wellName + '</div>';
                row += '<div class="col-md-1">' + el.stageName + '</div>';
                row += '<div class="col-md-2">' + el.folder + '</div>';
                row += '<div class="col-md-2">' + (null == el.cutEvent ? "" : el.cutEvent ) + '</div>';
                row += '<div class="col-md-2">' + (null == el.pickedEvent ? "" : el.pickedEvent) + '</div>';
                row += '<div class="col-md-2">' + (null == el.deletedEvent ? "" : el.deletedEvent) + '</div>';
                row += '<div class="col-md-1">' + moment(el.eventDate).format('MM/DD/YYYY') + '</div>';
                @if (User.IsInRole("Administrator"))
                {
                    <text>
                row += '<div class="col-md-1">' + el.picker+ '</div>'
                    </text>
                }
                row += '</div>';
                root.append(row);

            });
            //root.append('<div class="row"><div>Yahooo</div></div>');

        }

    </script>

}
